rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper to check if a user is supervisor
    function isSupervisor(uid) {
      return get(/databases/$(database)/documents/consultants/$(uid)).data.role == 'Supervisor';
    }
    
    // Reguli pentru colectia de consultanti
    match /consultants/{consultantId} {
      allow read: if request.auth != null && (request.auth.uid == consultantId || isSupervisor(request.auth.uid));
      allow update, delete: if request.auth != null && request.auth.uid == consultantId;
      allow create: if request.auth != null && request.auth.uid == consultantId;
    }
    
    // Reguli pentru colectia de clienti
    match /clients/{phoneNumber} {
      // Citire permisa proprietarului (prin consultantToken) sau supervisorului
      allow read: if request.auth != null && (
        resource.data.consultantToken == getConsultantToken(request.auth.uid) ||
        isSupervisor(request.auth.uid)
      );

      // Creare permisa doar cand consultantToken al documentului creat corespunde utilizatorului curent
      allow create: if request.auth != null && (
        request.resource.data.consultantToken == getConsultantToken(request.auth.uid) ||
        isSupervisor(request.auth.uid)
      );

      // Update/Delete permise proprietarului (prin consultantToken) sau supervisorului
      // token-ul este imuabil: nu poate fi schimbat la update
      allow update, delete: if request.auth != null && (
        (
          resource.data.consultantToken == getConsultantToken(request.auth.uid) &&
          request.resource.data.consultantToken == resource.data.consultantToken
        ) || isSupervisor(request.auth.uid)
      );
    }
    
    // Reguli pentru sub-colectiile clientilor (forms, meetings)
    match /clients/{phoneNumber}/{subcollection=**} {
      allow read, write: if request.auth != null && (
        get(/databases/$(database)/documents/clients/$(phoneNumber)).data.consultantToken == getConsultantToken(request.auth.uid) ||
        isSupervisor(request.auth.uid)
      );
    }
    
    // Reguli pentru colectia de statistici (mai stricte)
    // Monthly stats per consultant
    match /data/stats/monthly/{yearMonth}/consultants/{token} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        token == getConsultantToken(request.auth.uid) || isSupervisor(request.auth.uid)
      );
    }

    // Daily stats per consultant
    match /data/stats/daily/{day}/consultants/{token} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        token == getConsultantToken(request.auth.uid) || isSupervisor(request.auth.uid)
      );
    }

    // Global si teams (scriere doar de catre supervisor)
    match /data/stats/global {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSupervisor(request.auth.uid);
    }
    match /data/stats/teams/{team}/stats {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSupervisor(request.auth.uid);
    }

    // Compatibilitate: reguli pentru colectia veche "stats" la radacina
    match /stats/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isSupervisor(request.auth.uid);
    }
    
    // (Eliminat) Reguli pentru colectia de meetings la radacina - nu se foloseste
    
    // Functie helper pentru a obtine consultant token-ul
    function getConsultantToken(uid) {
      return get(/databases/$(database)/documents/consultants/$(uid)).data.token;
    }
  }
} 
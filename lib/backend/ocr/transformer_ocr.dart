import 'package:flutter/foundation.dart';

/// Service pentru transformarea »ôi curƒÉ»õarea textului OCR
class TransformerOCR {
  static final TransformerOCR _instance = TransformerOCR._internal();
  factory TransformerOCR() => _instance;
  TransformerOCR._internal();

  /// TransformƒÉ textul OCR brut √Æntr-un format curat »ôi structurat
  Future<TransformResult> transformText(String rawText) async {
    try {
      debugPrint('üîÑ TRANSFORMER_OCR: √éncepe transformarea textului (${rawText.length} caractere)');
      
      if (rawText.isEmpty) {
        return TransformResult(
          originalText: rawText,
          cleanedText: '',
          confidence: 0.0,
          improvements: [],
        );
      }
      
      var transformedText = rawText;
      final improvements = <String>[];
      
      // 1. CurƒÉ»õarea caracterelor OCR gre»ôite
      final characterResult = _fixOCRCharacters(transformedText);
      transformedText = characterResult.text;
      improvements.addAll(characterResult.improvements);
      
      // 2. Corectarea numerelor de telefon
      final phoneResult = _fixPhoneNumbers(transformedText);
      transformedText = phoneResult.text;
      improvements.addAll(phoneResult.improvements);
      
      // 3. Standardizarea spa»õiilor »ôi formatƒÉrii
      final spacingResult = _standardizeSpacing(transformedText);
      transformedText = spacingResult.text;
      improvements.addAll(spacingResult.improvements);
      
      // 4. Corectarea CNP-urilor
      final cnpResult = _fixCNPs(transformedText);
      transformedText = cnpResult.text;
      improvements.addAll(cnpResult.improvements);
      
      // 5. √émbunƒÉtƒÉ»õirea numelor proprii
      final nameResult = _fixProperNames(transformedText);
      transformedText = nameResult.text;
      improvements.addAll(nameResult.improvements);
      
      // 6. CurƒÉ»õarea finalƒÉ
      transformedText = _finalCleanup(transformedText);
      
      // CalculeazƒÉ confidence score
      final confidence = _calculateConfidence(rawText, transformedText, improvements);
      
      debugPrint('‚úÖ TRANSFORMER_OCR: Text transformat cu ${improvements.length} √ÆmbunƒÉtƒÉ»õiri');
      debugPrint('üìä TRANSFORMER_OCR: Confidence score: ${(confidence * 100).toStringAsFixed(1)}%');
      
      return TransformResult(
        originalText: rawText,
        cleanedText: transformedText,
        confidence: confidence,
        improvements: improvements,
      );

      } catch (e) {
      debugPrint('‚ùå TRANSFORMER_OCR: Eroare la transformarea textului: $e');
      return TransformResult(
        originalText: rawText,
        cleanedText: rawText,
        confidence: 0.0,
        improvements: ['Eroare la procesare: $e'],
      );
    }
  }

  /// CorecteazƒÉ caracterele OCR comune gre»ôite
  TransformStep _fixOCRCharacters(String text) {
    var fixed = text;
    final improvements = <String>[];
    
    // MapƒÉ de caractere OCR comune gre»ôite
    final characterMap = {
      // Cifre comune gre»ôite
      'O': '0', 'o': '0', '¬∞': '0',
      'I': '1', 'l': '1', '|': '1',
      'S': '5', '¬ß': '5',
      'G': '6', 'g': '6',
      'T': '7', 't': '7',
      'B': '8',
      
      // Litere comune gre»ôite
      '0': 'O', '1': 'I', '5': 'S', '6': 'G', '7': 'T', '8': 'B',
      
      // Caractere speciale rom√¢ne»ôti
      '√£': 'a', '√¢': 'a', 'ƒÉ': 'a',
      '√Æ': 'i', '√Ø': 'i',
      '≈ü': 's', '»ô': 's',
      '≈£': 't', '»õ': 't',
    };
    
    int changes = 0;
    
    // AplicƒÉ corectƒÉrile √Æn context
    for (final entry in characterMap.entries) {
      final before = fixed;
      
      // Pentru numere de telefon »ôi CNP-uri
      if (RegExp(r'\d').hasMatch(entry.value)) {
        // √énlocuie»ôte doar √Æn contexte numerice
        fixed = fixed.replaceAllMapped(
          RegExp('${RegExp.escape(entry.key)}(?=\\d)|(?<=\\d)${RegExp.escape(entry.key)}'),
          (match) => entry.value,
        );
      } else {
        // Pentru text normal
        fixed = fixed.replaceAllMapped(
          RegExp('\\b${RegExp.escape(entry.key)}(?=[a-zA-Z])|(?<=[a-zA-Z])${RegExp.escape(entry.key)}\\b'),
          (match) => entry.value,
        );
      }
      
      if (before != fixed) {
        changes++;
      }
    }
    
    if (changes > 0) {
      improvements.add('Corectate $changes caractere OCR gre»ôite');
    }
    
    return TransformStep(text: fixed, improvements: improvements);
  }

  /// CorecteazƒÉ »ôi standardizeazƒÉ numerele de telefon
  TransformStep _fixPhoneNumbers(String text) {
    var fixed = text;
    final improvements = <String>[];
    
    // Regex pentru identificarea numerelor de telefon posibile
    final phonePatterns = [
      RegExp(r'(\+?4?0?[7][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O])'),
      RegExp(r'(\+?4?0?[2-6][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O][0-9O])'),
    ];
    
    int fixes = 0;
    
    for (final pattern in phonePatterns) {
      fixed = fixed.replaceAllMapped(pattern, (match) {
        var phone = match.group(0)!;
        
        // CurƒÉ»õƒÉ caracterele non-numerice (pƒÉstreazƒÉ +)
        var cleaned = phone.replaceAll(RegExp(r'[^\d+]'), '');
        
        // CorecteazƒÉ caracterele OCR √Æn numere
        cleaned = cleaned
            .replaceAll('O', '0')
            .replaceAll('o', '0')
            .replaceAll('I', '1')
            .replaceAll('l', '1')
            .replaceAll('|', '1')
            .replaceAll('S', '5')
            .replaceAll('¬ß', '5');
        
        // StandardizeazƒÉ formatul
        if (cleaned.startsWith('+407')) {
          cleaned = '07${cleaned.substring(4)}';
        } else if (cleaned.startsWith('+40') && cleaned.length == 12) {
          cleaned = '0${cleaned.substring(3)}';
        } else if (cleaned.startsWith('407')) {
          cleaned = '07${cleaned.substring(3)}';
        } else if (cleaned.startsWith('40') && cleaned.length == 11) {
          cleaned = '0${cleaned.substring(2)}';
        }
        
        // ValideazƒÉ lungimea
        if (cleaned.length == 10 && cleaned.startsWith('07')) {
          fixes++;
          return cleaned;
        } else if (cleaned.length == 10 && RegExp(r'^0[2-6]').hasMatch(cleaned)) {
          fixes++;
          return cleaned;
        }
        
        return phone; // ReturneazƒÉ originalul dacƒÉ nu poate fi corectat
      });
    }
    
    if (fixes > 0) {
      improvements.add('Corectate »ôi standardizate $fixes numere de telefon');
    }
    
    return TransformStep(text: fixed, improvements: improvements);
  }

  /// StandardizeazƒÉ spa»õiile »ôi formatarea
  TransformStep _standardizeSpacing(String text) {
    var fixed = text;
    final improvements = <String>[];
    
    // √énlocuie»ôte multiple spa»õii cu unul singur
    final beforeSpaces = fixed;
    fixed = fixed.replaceAll(RegExp(r'\s+'), ' ');
    if (beforeSpaces != fixed) {
      improvements.add('Standardizate spa»õiile multiple');
    }
    
    // CurƒÉ»õƒÉ spa»õiile de la √Ænceput »ôi sf√¢r»ôit
    final beforeTrim = fixed;
    fixed = fixed.trim();
    if (beforeTrim != fixed) {
      improvements.add('Eliminate spa»õiile de la capete');
    }
    
    // StandardizeazƒÉ separatorii de linie
    final beforeLines = fixed;
    fixed = fixed.replaceAll(RegExp(r'\r\n|\r'), '\n');
    if (beforeLines != fixed) {
      improvements.add('Standardizate separatorii de linie');
    }
    
    // EliminƒÉ liniile goale multiple
    final beforeEmptyLines = fixed;
    fixed = fixed.replaceAll(RegExp(r'\n\s*\n\s*\n'), '\n\n');
    if (beforeEmptyLines != fixed) {
      improvements.add('Eliminate liniile goale multiple');
    }
    
    return TransformStep(text: fixed, improvements: improvements);
  }

  /// CorecteazƒÉ CNP-urile
  TransformStep _fixCNPs(String text) {
    var fixed = text;
    final improvements = <String>[];
    
    // Regex pentru identificarea CNP-urilor posibile
    final cnpPattern = RegExp(r'\b[1-8O][0-9O]{12}\b');
    
    int fixes = 0;
    
    fixed = fixed.replaceAllMapped(cnpPattern, (match) {
      var cnp = match.group(0)!;
      
      // CorecteazƒÉ caracterele OCR
      cnp = cnp
          .replaceAll('O', '0')
          .replaceAll('o', '0')
          .replaceAll('I', '1')
          .replaceAll('l', '1')
          .replaceAll('|', '1')
          .replaceAll('S', '5')
          .replaceAll('¬ß', '5');
      
      // ValideazƒÉ prima cifrƒÉ (gen)
      if (RegExp(r'^[1-8]').hasMatch(cnp) && cnp.length == 13) {
        fixes++;
        return cnp;
      }
      
      return match.group(0)!; // ReturneazƒÉ originalul
    });
    
    if (fixes > 0) {
      improvements.add('Corectate $fixes CNP-uri');
    }
    
    return TransformStep(text: fixed, improvements: improvements);
  }

  /// √émbunƒÉtƒÉ»õe»ôte numele proprii (capitalize)
  TransformStep _fixProperNames(String text) {
    var fixed = text;
    final improvements = <String>[];
    
    // Regex pentru identificarea numelor (2+ cuvinte cu prima literƒÉ mare)
    final namePattern = RegExp(r'\b[A-ZƒÇ√Ç√é»ò»ö][a-zƒÉ√¢√Æ»ô»õ]+\s+[A-ZƒÇ√Ç√é»ò»ö][a-zƒÉ√¢√Æ»ô»õ]+(?:\s+[A-ZƒÇ√Ç√é»ò»ö][a-zƒÉ√¢√Æ»ô»õ]+)*\b');
    
    int fixes = 0;
    
    fixed = fixed.replaceAllMapped(namePattern, (match) {
      final name = match.group(0)!;
      final words = name.split(' ');
      
      // Capitalize fiecare cuv√¢nt
      final capitalizedWords = words.map((word) {
        if (word.isEmpty) return word;
        return word[0].toUpperCase() + word.substring(1).toLowerCase();
      }).toList();
      
      final capitalizedName = capitalizedWords.join(' ');
      
      if (capitalizedName != name) {
        fixes++;
        return capitalizedName;
      }
      
      return name;
    });
    
    if (fixes > 0) {
      improvements.add('Corectate $fixes nume proprii');
    }
    
    return TransformStep(text: fixed, improvements: improvements);
  }

  /// CurƒÉ»õarea finalƒÉ a textului
  String _finalCleanup(String text) {
    return text
        .replaceAll(RegExp(r'[^\w\s\+\-\.\(\)\[\]\/\\:;,!?@#\$%&*=\u0100-\u017F]'), '')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim();
  }

  /// CalculeazƒÉ confidence score bazat pe √ÆmbunƒÉtƒÉ»õiri
  double _calculateConfidence(String original, String cleaned, List<String> improvements) {
    if (original.isEmpty) return 0.0;
    
    // Baza de confidence
    double confidence = 0.7; // 70% de bazƒÉ
    
    // AdaugƒÉ puncte pentru fiecare √ÆmbunƒÉtƒÉ»õire
    confidence += improvements.length * 0.05;
    
    // AdaugƒÉ puncte pentru lungimea textului (mai mult text = mai multƒÉ √Æncredere)
    final lengthFactor = (cleaned.length / 1000).clamp(0.0, 0.2);
    confidence += lengthFactor;
    
    // Scade puncte pentru diferen»õe mari (posibile erori)
    final diffRatio = (original.length - cleaned.length).abs() / original.length;
    if (diffRatio > 0.3) {
      confidence -= 0.1;
    }
    
    return confidence.clamp(0.0, 1.0);
  }

  /// Ob»õine statistici despre text
  TextStatistics getTextStatistics(String text) {
    final lines = text.split('\n').where((line) => line.trim().isNotEmpty).length;
    final words = text.split(RegExp(r'\s+')).where((word) => word.isNotEmpty).length;
    final characters = text.length;
    
    final phoneMatches = RegExp(r'\b0[7][0-9]{8}\b|\b0[2-6][0-9]{8}\b').allMatches(text).length;
    final cnpMatches = RegExp(r'\b[1-8][0-9]{12}\b').allMatches(text).length;
    final nameMatches = RegExp(r'\b[A-ZƒÇ√Ç√é»ò»ö][a-zƒÉ√¢√Æ»ô»õ]+\s+[A-ZƒÇ√Ç√é»ò»ö][a-zƒÉ√¢√Æ»ô»õ]+\b').allMatches(text).length;
    
    return TextStatistics(
      lines: lines,
      words: words,
      characters: characters,
      phoneNumbers: phoneMatches,
      cnps: cnpMatches,
      names: nameMatches,
    );
  }
}

/// Rezultatul unei etape de transformare
class TransformStep {
  final String text;
  final List<String> improvements;
  
  const TransformStep({
    required this.text,
    required this.improvements,
  });
}

/// Rezultatul transformƒÉrii complete
class TransformResult {
  final String originalText;
  final String cleanedText;
  final double confidence;
  final List<String> improvements;
  
  const TransformResult({
    required this.originalText,
    required this.cleanedText,
    required this.confidence,
    required this.improvements,
  });
  
  /// Statistici comparate
  String get improvementSummary {
    if (improvements.isEmpty) {
      return 'Nu au fost necesare √ÆmbunƒÉtƒÉ»õiri';
    }
    
    return '${improvements.length} √ÆmbunƒÉtƒÉ»õiri aplicate:\n${improvements.map((i) => '‚Ä¢ $i').join('\n')}';
  }
  
  @override
  String toString() => 'TransformResult(confidence: $confidence, improvements: ${improvements.length})';
}

/// Statistici despre text
class TextStatistics {
  final int lines;
  final int words;
  final int characters;
  final int phoneNumbers;
  final int cnps;
  final int names;
  
  const TextStatistics({
    required this.lines,
    required this.words,
    required this.characters,
    required this.phoneNumbers,
    required this.cnps,
    required this.names,
  });

  @override
  String toString() => 'TextStatistics(lines: $lines, words: $words, phones: $phoneNumbers, cnps: $cnps, names: $names)';
}

 